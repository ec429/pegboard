SPINLOCKS

We require that the MMU detects a DD DD prefix and pulls down /WAIT for any other CPUs that try to DD DD.  It unlocks when it sees a write complete
We use the following locking functions:

spin_lock:			; acquire lock at IX
	lock sra (IX+0)	; lock prefix is DD
	jr c, spin_lock
	ret

spin_unlock:		; release lock at IX
	ld a,0xfe
	lock ld (IX+0),a
	ret

The locked instruction assembles to DD DD CB 00 2E (unless I've made a mistake...)
M-cycles:
spin_lock:
 1  2  3  4  5  6  7  8  9  10 1  2  3  4  5  6  7  8  9  20 1  2  3  4  5  6  7  8  9  30 1  2  3  4  5  6  7  8  9  40 1  2  3  4  5
 T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__T__
|OCF4   W   |OCF4   W L!|OCF4   W   |OD3 W   |IO5    W      |MR4    W   |MW3   UW|OCF4   W   |OD3 W   |IO5           |repeat from spin_lock
                                                                                           if acquired:OCF4      W   |SR3 W   |SR3 W   |
spin_unlock:
|OCF4   W   |OD3 W   |OCF4   W   |OCF4   W   |OD3 W   |IO5    W      |MW3    W|OCF4      W   |SR3 W   |SR3 W   |

MEMORY MANAGEMENT UNIT

A15-A12 are page selectors (so each CPU has 16 virtual pages, and each page is 4kB).  The paging is set up with OUTs (detailed below).  Multiple CPUs may map the same page simultaneously.  If a CPU pulls down /MREQ and either /RD or /WR, it now owns that page, and any other CPU trying to /MREQ the same page will get /WAITed.  As mentioned above, the lock prefix will /WAIT if any other CPU is in a locked op.
However, this serialisation and locking is NOT applied to peripheral device memory (MMIO); if two CPUs try to access the same MMIO page, the behaviour is undefined.

Reading from a nonexistent page produces 0xff (and writing of course has no effect).
This scheme allows for a maximum of 256 Ã— 4kB pages, that is a total of 1MB.  (Phrased another way, full physical addresses are 20 bits.)

The MMU is controlled through I/O port 0x04, as follows:
AMSB<15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00>ALSB  DMSB<7|6|5|4|3|2|1|0>DLSB
WR  < 0|IO| 0| 0|   vpage   | 0| 0| 0| 0| 0| 1| 0| 0>          <     ppage     >        Maps memory page ppage into vpage.  If IO bit set, maps in peripheral device memory for MMIO instead.  (Two unused bits, A13 and A12)
WR  < 1|IO|    prot_bits    | 0| 0| 0| 0| 0| 1| 0| 0>          <     ppage     >        Sets protection bits on memory page ppage.  If IO bit set, applies to peripheral device memory instead.  (prot_bits interpretation TBD)  (All bits used).
RD  < 0| 0| 0| 0|   vpage   | 0| 0| 0| 0| 0| 1| 0| 0>          <     ppage     >        Returns the ppage mapped in at vpage.
RD  < 0| 0| 0| 1|   vpage   | 0| 0| 0| 0| 0| 1| 0| 0>          < prot_bits |I|0>        Returns the protection bits of page mapped at vpage; D1 is set if it is peripheral device memory.  (One unused response bit D0)
RD  < 0| 0| 1| 0| 0| 0| 0| 0| 0| 0| 0| 0| 0| 1| 0| 0>          <   socket_id   >        Returns the socket ID of the requesting processor.  This implicitly limits the number of processors to 256.
Any reads/writes not matching any of the above have undefined behaviour.

TERMINAL I/O

The serial terminal is attached on I/O port 0x10, and assigned the corresponding IRQ.  Writing a byte to this port sends it to the terminal.  A CPU writing 0x10 to port 0 (the shared I/O control port) claims the IRQ.  When a character is ready to read from the terminal, the IRQ is asserted; an IN from 0x10 pops a byte from the buffer, and if this empties the buffer the IRQ will be cleared.

TIMER INTERRUPT

The timer is on IRQ 2, and interrupts every 350,000 clock cycles (this is 10 times per second at a 3.5MHz clock speed).
The interrupts are staggered across CPUs, spaced 1024 clock cycles apart.

PERIPHERAL DEVICE BUS

The 'pegbus' involves devices attaching themselves to the MMU; all pegbus peripherals are controlled solely through MMIO, and identified by the high nybble of their ppage number.  (If a device wants to expose more than 64kB of memory, it will have to pretend to be multiple separate devices.)  The first ppage for an IO device should begin with pegbus config space, laid out as follows (provisional):
struct pegbus_config {
	uint16_t device_id; /* device IDs 0xff00-0xffff are reserved for experimental use.  Remember that pegboard is little-endian */
	uint8_t bus_version; /* should be 0 for this version of the spec */
	uint8_t command;
	struct pegbus_caps {
		uint8_t key; /* never 0xff */
		uint8_t len;
		uint8_t data[len];
	} caps[];
	uint8_t end_of_caps; /* must be 0xff */
};
The pegbus does not allow bus-mastering/DMA; the only way for the device to initiate communication is by sending an interrupt.  Device n is associated with IRQ (0x80+n*2), thus the range 0x80-0x9e is reserved for pegbus.
A pegbus device will not be probed until it sends an interrupt; thus it should do so as soon as it is powered on.
Defined commands are:
	0x00	NOP.
	0xf0	SHUTUP.  The device should produce no further interrupts until any other command is written.
